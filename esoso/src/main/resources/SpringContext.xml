<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:dwr="http://www.directwebremoting.org/schema/spring-dwr"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:task="http://www.springframework.org/schema/task" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
        http://www.directwebremoting.org/schema/spring-dwr http://www.directwebremoting.org/schema/spring-dwr-3.2.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
        http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.2.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd">

	<context:property-placeholder location="classpath:db.properties" />

	<context:component-scan base-package="com.zhidian" />

	<!-- <mvc:annotation-driven /> -->

	<!-- http://www.cnblogs.com/sunp823/p/5601397.html -->
	<mvc:annotation-driven>
		<mvc:message-converters register-defaults="true">
			<!-- @ResponseBody乱码问题，将StringHttpMessageConverter的默认编码设为UTF-8 -->
			<beans:bean
				class="org.springframework.http.converter.StringHttpMessageConverter">
				<beans:constructor-arg value="UTF-8" />
			</beans:bean>
			<!-- 配置Fastjson支持 -->
			<beans:bean
				class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
				<beans:property name="charset" value="UTF-8" />
				<beans:property name="supportedMediaTypes">
					<beans:list>
						<beans:value>application/json</beans:value>
						<beans:value>text/html;charset=UTF-8</beans:value>
					</beans:list>
				</beans:property>
				<beans:property name="features">
					<beans:list>
						<beans:value>WriteMapNullValue</beans:value>
						<beans:value>QuoteFieldNames</beans:value>
						<beans:value>WriteDateUseDateFormat</beans:value>
						<beans:value>WriteEnumUsingToString</beans:value>
					</beans:list>
				</beans:property>
			</beans:bean>
		</mvc:message-converters>
	</mvc:annotation-driven>

	<!--避免拦截静态资源 -->
   	<mvc:resources location="/WEB-INF/static/" mapping="/static/**/*" />
	<mvc:resources location="/WEB-INF/css/" mapping="/css/**/*" />
	<mvc:resources location="/WEB-INF/js/" mapping="/js/**/*" />
	<mvc:resources location="/WEB-INF/img/" mapping="/img/**/*" />
	<mvc:resources location="/WEB-INF/websites/" mapping="/websites/**/*" />
	<mvc:resources location="/WEB-INF/admin/" mapping="/admin/**/*" />
	<mvc:resources location="/WEB-INF/ico/" mapping="/ico/**/*" />
	<!-- <mvc:resources location="/WEB-INF/" mapping="/**/*.js" /> <mvc:resources 
		location="/WEB-INF/" mapping="/**/*.png" /> <mvc:resources location="/WEB-INF/" 
		mapping="/**/*.gif" /> <mvc:resources location="/WEB-INF/" mapping="/**/*.css" 
		/> <mvc:resources location="/WEB-INF/" mapping="/**/*.jpg" /> <mvc:resources 
		location="/WEB-INF/" mapping="/**/*.woff" /> <mvc:resources location="/WEB-INF/" 
		mapping="/**/*.ttf" /> <mvc:resources location="/WEB-INF/" mapping="/**/*.map" 
		/> <mvc:resources location="/WEB-INF/" mapping="/**/*.swf" /> -->


	<!-- 视图解析器 -->
	<beans:bean id="templateResolver"
		class="org.thymeleaf.templateresolver.ServletContextTemplateResolver">
		<beans:property name="prefix" value="/WEB-INF/" />
		<beans:property name="suffix" value=".html" />
		<beans:property name="templateMode" value="HTML5" />
		<!-- Template cache is set to false (default is true). -->
		<beans:property name="cacheable" value="false" />
		<!-- 可有可无 -->
		<!-- <beans:property name="characterEncoding" value="UTF-8" /> -->
	</beans:bean>

	<beans:bean id="templateEngine" class="org.thymeleaf.spring3.SpringTemplateEngine">
		<beans:property name="templateResolver" ref="templateResolver" />
	</beans:bean>

	<!-- Simple strategy: only path extension is taken into account -->
	<beans:bean id="cnManager"
		class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
		<beans:property name="favorPathExtension" value="true" />
		<beans:property name="ignoreAcceptHeader" value="true" />
		<beans:property name="defaultContentType" value="text/html" />

		<beans:property name="mediaTypes">
			<beans:map>
				<beans:entry key="html" value="text/html" />
				<beans:entry key="xml" value="application/xml" />
				<beans:entry key="atom" value="application/atom+xml" />
			</beans:map>
		</beans:property>
	</beans:bean>

	<!-- - The ContentNegotiatingViewResolver delegates to the InternalResourceViewResolver 
		and BeanNameViewResolver, - and uses the requested media type (determined 
		by the path extension) to pick a matching view. - When the media type is 
		'text/html', it will delegate to the InternalResourceViewResolver's JstlView, 
		- otherwise to the BeanNameViewResolver. -->
	<beans:bean
		class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		<beans:property name="contentNegotiationManager" ref="cnManager" />

		<beans:property name="viewResolvers">
			<beans:list>
				<!-- Used here for 'xml' and 'atom' views -->
				<beans:bean
					class="org.springframework.web.servlet.view.BeanNameViewResolver">
					<beans:property name="order" value="1" />
				</beans:bean>

				<beans:bean class="org.thymeleaf.spring3.view.ThymeleafViewResolver">
					<beans:property name="templateEngine" ref="templateEngine" />
					<beans:property name="characterEncoding" value="UTF-8" />
					<beans:property name="order" value="2" />
					<!-- We need to set exclusions because Content Negotiation tries to 
						resolve from -->
					<!-- Thymeleaf even if a specific view bean (of a different class) is 
						already -->
					<!-- found, which might cause exceptions (e.g. ThymeleafView does not 
						have a -->
					<!-- 'marshaller' property). -->
					<beans:property name="excludedViewNames" value="*.xml" />
				</beans:bean>

				<!-- Default viewClass: JSTL view (JSP with html output) -->
				<!-- <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"> -->
				<!-- Example: a logical view name of 'vets' is mapped to '/WEB-INF/jsp/vets.jsp' -->
				<!-- <property name="prefix" value="/WEB-INF/jsp/"/> -->
				<!-- <property name="suffix" value=".jsp"/> -->
				<!-- <property name="order" value="3"/> -->
				<!-- </bean> -->

			</beans:list>
		</beans:property>
	</beans:bean>



	<!-- druid连接池 -->
	<beans:bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
		<beans:property name="driverClassName" value="${mysql.driver}" />
		<beans:property name="url" value="${mysql.url}" />
		<beans:property name="username" value="${mysql.username}" />
		<beans:property name="password" value="${mysql.password}" />
	</beans:bean>

	<beans:bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!--dataSource属性指定要用到的连接池 -->
		<beans:property name="dataSource" ref="dataSource" />
		<!--configLocation属性指定mybatis的核心配置文件 -->
		<!-- <beans:property name="configLocation" value="classpath:configs/Configuration.xml" 
			/> -->
		<!-- 别名注册 -->
		<beans:property name="typeAliasesPackage" value="com.zhidian.model"></beans:property>
		<beans:property name="mapperLocations"
			value="classpath:com/zhidian/mapper/*.xml" />
	</beans:bean>

	<beans:bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<beans:property name="basePackage" value="com.zhidian.mapper" />
	</beans:bean>

	<!--5.1 配置事务管理器 -->
	<beans:bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<beans:property name="dataSource" ref="dataSource" />
	</beans:bean>

	<!-- 5.2 配置事务增强(如果管理事务?) -->
	<!-- <tx:advice id="txAdvice" transaction-manager="txManager"> <tx:attributes> 
		<tx:method name="*" read-only="false" /> </tx:attributes> </tx:advice> -->

	<!-- 5.3 Aop配置： 拦截哪些方法(切入点表表达式) + 应用上面的事务增强配置 -->
	<!-- <aop:config> <aop:pointcut expression="execution(* cn.itcast.a_tx.DeptService.save(..))" 
		id="pt" /> <aop:advisor advice-ref="txAdvice" pointcut-ref="pt" /> </aop:config> -->

	<!--6 支持注解驱动的事务管理，指定事务管理器 -->
	<tx:annotation-driven transaction-manager="transactionManager" />

	<!--7 aspectj支持自动代理实现AOP功能 -->
	<aop:aspectj-autoproxy proxy-target-class="true"></aop:aspectj-autoproxy>

	<!-- 用于处理上传多个附件 -->
	<beans:bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- one of the properties available; the maximum file size in bytes -->
		<!-- dongneng maxFile 20M -->
		<beans:property name="maxUploadSize" value="20971520" />
		<beans:property name="maxInMemorySize" value="4096" />
	</beans:bean>

	<!-- 设置json和response的字符编码 -->
	<beans:bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<beans:property name="messageConverters">
			<beans:list>
				<beans:bean
					class="org.springframework.http.converter.ByteArrayHttpMessageConverter" />
				<beans:ref bean="stringHttpMessageConverter" />
			</beans:list>
		</beans:property>
	</beans:bean>
	<beans:bean id="stringHttpMessageConverter"
		class="org.springframework.http.converter.StringHttpMessageConverter">
		<beans:property name="supportedMediaTypes">
			<beans:list>
				<beans:value>
					text/plain;charset=UTF-8
				</beans:value>
			</beans:list>
		</beans:property>
	</beans:bean>


	<!-- http://www.cnblogs.com/everSeeker/p/5188840.html 开启定时任务的2种方法，（1）通过spring－task，采用@Scheduled注解方式，配置简单，使用灵活方便； 
		（2）通过quartz，配置稍微复杂，功能强大 方法一： 开启task:annotation-driven，spring可以通过注解@Scheduled来开启任务 
		<task:executor id="executor" pool-size="5"/> <task:scheduler id="scheduler" 
		pool-size="10"/> <task:annotation-driven executor="executor" scheduler="scheduler"/> 
		方法二： 配置作业类 <bean id="quartzTask" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"> 
		<property name="targetObject"> <bean class="com.everSeeker.task.QuartzTask"/> 
		</property> <property name="targetMethod" value="rankingByScore"/> <property 
		name="concurrent" value="false"/> </bean> 配置触发器 关于cronExpression, 请参考： http://www.cnblogs.com/yaowen/p/3779284.html 
		<bean id="cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean"> 
		<property name="jobDetail" ref="quartzTask"/> 每隔10s执行一次 <property name="cronExpression" 
		value="0/10 * * * * ?"/> </bean> 配置调度工厂 <bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean"> 
		<property name="triggers"> <list> <ref bean="cronTrigger"/> </list> </property> 
		</bean> -->
</beans:beans>