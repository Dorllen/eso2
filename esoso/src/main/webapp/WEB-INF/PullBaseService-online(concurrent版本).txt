	public List<PullResultPageModel> startPullPageDataFromList(List<PullResultDataTaskModel> models) {
		if (models != null && models.size() > 0) {
			List<PullResultPageModel> pullList = new ArrayList<PullResultPageModel>(models.size());
			long start = System.currentTimeMillis();
			log.info("All startPullPageDataFromList start time -> {}", start);
			ExecutorService service = Executors.newFixedThreadPool(5);
			CompletionService<PullResultPageModel> cs = new ExecutorCompletionService<PullResultPageModel>(service);
			for (int i = 0; i < models.size(); i++) {
				final PullResultDataTaskModel model = models.get(i);
				cs.submit(new Callable<PullResultPageModel>() {
					public PullResultPageModel call() throws Exception {
						if (model == null) {
							return null;
						}
						// 获得对象
						Class<?> claz = Class.forName(model.getPageProcess());
						if (claz == null) {
							return null;
						}
						try {
							// 反射加载
							Constructor<?> c = claz.getConstructor(PullResultPageModel.class);
							if (model.getPom() == null) {
								log.warn("Don't has PullPageModel for website -> {} , url -> {} ", model.getWebsite(),
										model.getFrom());
								return null;
							}
							BaseResultPageProcessor<?> pageProcessor = (BaseResultPageProcessor<?>) c
									.newInstance(model.getPom());
							ResultSimplePipeline<PullResultPageModel> pipeline = new ResultSimplePipeline<PullResultPageModel>();
							try {
								long s = System.currentTimeMillis();
								Spider.create(pageProcessor).addUrl(model.getFrom()).addPipeline(pipeline).run();
								long e = System.currentTimeMillis();
								log.info("{} spend time is -> {}", model.getFrom(), (e - s) / 1000);
								// 数据装载
								return pipeline.getObj();

							} catch (Exception e) {
								log.info("PullBaseService downloading page ... error ...url:{}", model.getFrom());
								e.printStackTrace();
							}
						} catch (InstantiationException e) {
							e.printStackTrace();
						}
						return null;
					}

				});
			}
			for (int i = 0; i < models.size(); i++) {
				try {
					// 执行最大时间10s
					PullResultPageModel pull = cs.take().get(10, TimeUnit.SECONDS);
					if (pull != null) {
						pullList.add(pull);
					}
				} catch (TimeoutException e) {
					e.printStackTrace();
				} catch (InterruptedException e) {
					e.printStackTrace();
				} catch (ExecutionException e) {
					e.printStackTrace();
				}
			}
			if (!service.isShutdown()) {
				service.shutdown();
			}
			long end = System.currentTimeMillis();
			log.info("All startPullPageDataFromList end time -> {} and spend time is {} s", end, (end - start) / 1000);
			return pullList;
		}
		return null;
	}